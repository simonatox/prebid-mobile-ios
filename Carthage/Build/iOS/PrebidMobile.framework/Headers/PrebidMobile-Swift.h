#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PrebidMobile",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ResultCode : NSInteger;

SWIFT_CLASS("_TtC12PrebidMobile6AdUnit")
@interface AdUnit : NSObject
- (void)fetchDemandWithAdObject:(id _Nonnull)adObject completion:(void (^ _Nonnull)(enum ResultCode))completion;
/// The func uses Targeting.addUserKeyword() inside.
/// \param key parameter is omitted
///
/// \param value is passed to Targeting.addUserKeyword()
///
- (void)addUserKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_DEPRECATED_MSG("Please use Targeting.addUserKeyword() method instead");
/// The func uses Targeting.addUserKeyword() inside.
/// \param key parameter is omitted
///
/// \param value is passed to Targeting.addUserKeywords()
///
- (void)addUserKeywordsWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value SWIFT_DEPRECATED_MSG("Please use Targeting.addUserKeywords() method instead");
/// The func uses Targeting.clearUserKeywords() inside.
- (void)clearUserKeywords SWIFT_DEPRECATED_MSG("Please use Targeting.clearUserKeywords() method instead");
/// The func uses Targeting.removeUserKeyword() inside.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     forKey: is a value that has been added previously
///   </li>
/// </ul>
- (void)removeUserKeywordForKey:(NSString * _Nonnull)forKey SWIFT_DEPRECATED_MSG("Please use Targeting.removeUserKeyword() method instead");
/// This method obtains the context data keyword & value for adunit context targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addContextDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the context data keyword & values for adunit context targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateContextDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific context data keyword & values set from adunit context targeting
- (void)removeContextDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all context data set from adunit context targeting
- (void)clearContextData;
/// This method obtains the context keyword for adunit context targeting
/// Inserts the given element in the set if it is not already present.
- (void)addContextKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the context keyword set for adunit context targeting
/// Adds the elements of the given set to the set.
- (void)addContextKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific context keyword from adunit context targeting
- (void)removeContextKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of adunit context targeting
- (void)clearContextKeywords;
/// This method allows to set the auto refresh period for the demand
/// \param time refresh time interval
///
- (void)setAutoRefreshMillisWithTime:(double)time;
/// This method stops the auto refresh of demand
- (void)stopAutoRefresh;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

SWIFT_CLASS("_TtC12PrebidMobile11AdViewUtils")
@interface AdViewUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)findPrebidCreativeSize:(UIView * _Nonnull)adView success:(void (^ _Nonnull)(CGSize))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


SWIFT_CLASS("_TtC12PrebidMobile12BannerAdUnit")
@interface BannerAdUnit : AdUnit
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (void)addAdditionalSizeWithSizes:(NSArray<NSValue *> * _Nonnull)sizes;
@end

typedef SWIFT_ENUM(NSInteger, Gender, closed) {
  GenderUnknown = 0,
  GenderMale = 1,
  GenderFemale = 2,
};


SWIFT_CLASS("_TtC12PrebidMobile18InterstitialAdUnit")
@interface InterstitialAdUnit : AdUnit
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId minWidthPerc:(NSInteger)minWidthPerc minHeightPerc:(NSInteger)minHeightPerc;
@end

enum PrebidHost : NSInteger;

SWIFT_CLASS("_TtC12PrebidMobile6Prebid")
@interface Prebid : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bidderNameAppNexus;)
+ (NSString * _Nonnull)bidderNameAppNexus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bidderNameRubiconProject;)
+ (NSString * _Nonnull)bidderNameRubiconProject SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger timeoutMillis;
@property (nonatomic, copy) NSString * _Null_unspecified prebidServerAccountId;
@property (nonatomic, copy) NSString * _Nonnull storedAuctionResponse;
@property (nonatomic) BOOL shareGeoLocation;
@property (nonatomic) enum PrebidHost prebidServerHost;
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Prebid * _Nonnull shared;)
+ (Prebid * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)setCustomPrebidServerWithUrl:(NSString * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
- (void)addStoredBidResponseWithBidder:(NSString * _Nonnull)bidder responseId:(NSString * _Nonnull)responseId;
- (void)clearStoredBidResponses;
@end

typedef SWIFT_ENUM(NSInteger, PrebidHost, closed) {
/// URL <a href="URL">https://prebid.adnxs.com/pbs/v1/openrtb2/auction</a>
  PrebidHostAppnexus = 0,
/// URL <a href="URL">https://prebid-server.rubiconproject.com/openrtb2/auction</a>
  PrebidHostRubicon = 1,
  PrebidHostCustom = 2,
};


SWIFT_CLASS("_TtC12PrebidMobile14RequestBuilder")
@interface RequestBuilder : NSObject
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ResultCode, closed) {
  ResultCodePrebidDemandFetchSuccess = 0,
  ResultCodePrebidServerNotSpecified = 1,
  ResultCodePrebidInvalidAccountId = 2,
  ResultCodePrebidInvalidConfigId = 3,
  ResultCodePrebidInvalidSize = 4,
  ResultCodePrebidNetworkError = 5,
  ResultCodePrebidServerURLInvalid = 6,
  ResultCodePrebidServerError = 7,
  ResultCodePrebidDemandNoBids = 8,
  ResultCodePrebidDemandTimedOut = 9,
};

@class CLLocation;

SWIFT_CLASS("_TtC12PrebidMobile9Targeting")
@interface Targeting : NSObject
/// This property gets the gender enum passed set by the developer
@property (nonatomic) enum Gender gender;
@property (nonatomic, readonly) NSInteger yearOfBirth;
/// This method obtains a bidder name allowed to receive global targeting
- (void)addBidderToAccessControlList:(NSString * _Nonnull)bidderName;
/// This method allows to remove specific bidder name
- (void)removeBidderFromAccessControlList:(NSString * _Nonnull)bidderName;
/// This method allows to remove all the bidder name set
- (void)clearAccessControlList;
/// This method obtains the user data keyword & value for global user targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addUserDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the user data keyword & values set for global user targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateUserDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific user data keyword & value set from global user targeting
- (void)removeUserDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all user data set from global user targeting
- (void)clearUserData;
/// This method obtains the user keyword for global user targeting
/// Inserts the given element in the set if it is not already present.
- (void)addUserKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the user keyword set for global user targeting
/// Adds the elements of the given set to the set.
- (void)addUserKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific user keyword from global user targeting
- (void)removeUserKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of global user targeting
- (void)clearUserKeywords;
/// This method obtains the context data keyword & value context for global context targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addContextDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the context data keyword & values set for global context targeting.
/// the values if the key already exist will be replaced with the new set of values
- (void)updateContextDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific context data keyword & values set from global context targeting
- (void)removeContextDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all context data set from global context targeting
- (void)clearContextData;
/// This method obtains the context keyword for global context targeting
/// Inserts the given element in the set if it is not already present.
- (void)addContextKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the context keyword set for global context targeting
/// Adds the elements of the given set to the set.
- (void)addContextKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific context keyword from global context targeting
- (void)removeContextKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of global context targeting
- (void)clearContextKeywords;
/// This property gets the year of birth value set by the application developer
- (BOOL)setYearOfBirthWithYob:(NSInteger)yob error:(NSError * _Nullable * _Nullable)error;
/// This property clears year of birth value set by the application developer
- (void)clearYearOfBirth;
/// The itunes app id for targeting
@property (nonatomic, copy) NSString * _Nullable itunesID;
/// The application location for targeting
@property (nonatomic, strong) CLLocation * _Nullable location;
/// The boolean value set by the user to collect user data
@property (nonatomic) BOOL subjectToCOPPA;
/// The boolean value set by the user to collect user data
@property (nonatomic) BOOL subjectToGDPR;
/// The consent string for sending the GDPR consent
@property (nonatomic, copy) NSString * _Nullable gdprConsentString;
@property (nonatomic, copy) NSString * _Nullable storeURL;
@property (nonatomic, copy) NSString * _Nullable domain;
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Targeting * _Nonnull shared;)
+ (Targeting * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12PrebidMobile5Utils")
@interface Utils : NSObject
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Utils * _Nonnull shared;)
+ (Utils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)removeHBKeywordsWithAdObject:(id _Nonnull)adObject;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PrebidMobile",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ResultCode : NSInteger;

SWIFT_CLASS("_TtC12PrebidMobile6AdUnit")
@interface AdUnit : NSObject
- (void)fetchDemandWithAdObject:(id _Nonnull)adObject completion:(void (^ _Nonnull)(enum ResultCode))completion;
/// The func uses Targeting.addUserKeyword() inside.
/// \param key parameter is omitted
///
/// \param value is passed to Targeting.addUserKeyword()
///
- (void)addUserKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_DEPRECATED_MSG("Please use Targeting.addUserKeyword() method instead");
/// The func uses Targeting.addUserKeyword() inside.
/// \param key parameter is omitted
///
/// \param value is passed to Targeting.addUserKeywords()
///
- (void)addUserKeywordsWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value SWIFT_DEPRECATED_MSG("Please use Targeting.addUserKeywords() method instead");
/// The func uses Targeting.clearUserKeywords() inside.
- (void)clearUserKeywords SWIFT_DEPRECATED_MSG("Please use Targeting.clearUserKeywords() method instead");
/// The func uses Targeting.removeUserKeyword() inside.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     forKey: is a value that has been added previously
///   </li>
/// </ul>
- (void)removeUserKeywordForKey:(NSString * _Nonnull)forKey SWIFT_DEPRECATED_MSG("Please use Targeting.removeUserKeyword() method instead");
/// This method obtains the context data keyword & value for adunit context targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addContextDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the context data keyword & values for adunit context targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateContextDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific context data keyword & values set from adunit context targeting
- (void)removeContextDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all context data set from adunit context targeting
- (void)clearContextData;
/// This method obtains the context keyword for adunit context targeting
/// Inserts the given element in the set if it is not already present.
- (void)addContextKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the context keyword set for adunit context targeting
/// Adds the elements of the given set to the set.
- (void)addContextKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific context keyword from adunit context targeting
- (void)removeContextKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of adunit context targeting
- (void)clearContextKeywords;
/// This method allows to set the auto refresh period for the demand
/// \param time refresh time interval
///
- (void)setAutoRefreshMillisWithTime:(double)time;
/// This method stops the auto refresh of demand
- (void)stopAutoRefresh;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

SWIFT_CLASS("_TtC12PrebidMobile11AdViewUtils")
@interface AdViewUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)findPrebidCreativeSize:(UIView * _Nonnull)adView success:(void (^ _Nonnull)(CGSize))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


SWIFT_CLASS("_TtC12PrebidMobile12BannerAdUnit")
@interface BannerAdUnit : AdUnit
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (void)addAdditionalSizeWithSizes:(NSArray<NSValue *> * _Nonnull)sizes;
@end

typedef SWIFT_ENUM(NSInteger, Gender, closed) {
  GenderUnknown = 0,
  GenderMale = 1,
  GenderFemale = 2,
};


SWIFT_CLASS("_TtC12PrebidMobile18InterstitialAdUnit")
@interface InterstitialAdUnit : AdUnit
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId minWidthPerc:(NSInteger)minWidthPerc minHeightPerc:(NSInteger)minHeightPerc;
@end

enum PrebidHost : NSInteger;

SWIFT_CLASS("_TtC12PrebidMobile6Prebid")
@interface Prebid : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bidderNameAppNexus;)
+ (NSString * _Nonnull)bidderNameAppNexus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bidderNameRubiconProject;)
+ (NSString * _Nonnull)bidderNameRubiconProject SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger timeoutMillis;
@property (nonatomic, copy) NSString * _Null_unspecified prebidServerAccountId;
@property (nonatomic, copy) NSString * _Nonnull storedAuctionResponse;
@property (nonatomic) BOOL shareGeoLocation;
@property (nonatomic) enum PrebidHost prebidServerHost;
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Prebid * _Nonnull shared;)
+ (Prebid * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)setCustomPrebidServerWithUrl:(NSString * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
- (void)addStoredBidResponseWithBidder:(NSString * _Nonnull)bidder responseId:(NSString * _Nonnull)responseId;
- (void)clearStoredBidResponses;
@end

typedef SWIFT_ENUM(NSInteger, PrebidHost, closed) {
/// URL <a href="URL">https://prebid.adnxs.com/pbs/v1/openrtb2/auction</a>
  PrebidHostAppnexus = 0,
/// URL <a href="URL">https://prebid-server.rubiconproject.com/openrtb2/auction</a>
  PrebidHostRubicon = 1,
  PrebidHostCustom = 2,
};


SWIFT_CLASS("_TtC12PrebidMobile14RequestBuilder")
@interface RequestBuilder : NSObject
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ResultCode, closed) {
  ResultCodePrebidDemandFetchSuccess = 0,
  ResultCodePrebidServerNotSpecified = 1,
  ResultCodePrebidInvalidAccountId = 2,
  ResultCodePrebidInvalidConfigId = 3,
  ResultCodePrebidInvalidSize = 4,
  ResultCodePrebidNetworkError = 5,
  ResultCodePrebidServerURLInvalid = 6,
  ResultCodePrebidServerError = 7,
  ResultCodePrebidDemandNoBids = 8,
  ResultCodePrebidDemandTimedOut = 9,
};

@class CLLocation;

SWIFT_CLASS("_TtC12PrebidMobile9Targeting")
@interface Targeting : NSObject
/// This property gets the gender enum passed set by the developer
@property (nonatomic) enum Gender gender;
@property (nonatomic, readonly) NSInteger yearOfBirth;
/// This method obtains a bidder name allowed to receive global targeting
- (void)addBidderToAccessControlList:(NSString * _Nonnull)bidderName;
/// This method allows to remove specific bidder name
- (void)removeBidderFromAccessControlList:(NSString * _Nonnull)bidderName;
/// This method allows to remove all the bidder name set
- (void)clearAccessControlList;
/// This method obtains the user data keyword & value for global user targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addUserDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the user data keyword & values set for global user targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateUserDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific user data keyword & value set from global user targeting
- (void)removeUserDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all user data set from global user targeting
- (void)clearUserData;
/// This method obtains the user keyword for global user targeting
/// Inserts the given element in the set if it is not already present.
- (void)addUserKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the user keyword set for global user targeting
/// Adds the elements of the given set to the set.
- (void)addUserKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific user keyword from global user targeting
- (void)removeUserKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of global user targeting
- (void)clearUserKeywords;
/// This method obtains the context data keyword & value context for global context targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addContextDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the context data keyword & values set for global context targeting.
/// the values if the key already exist will be replaced with the new set of values
- (void)updateContextDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific context data keyword & values set from global context targeting
- (void)removeContextDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all context data set from global context targeting
- (void)clearContextData;
/// This method obtains the context keyword for global context targeting
/// Inserts the given element in the set if it is not already present.
- (void)addContextKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the context keyword set for global context targeting
/// Adds the elements of the given set to the set.
- (void)addContextKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific context keyword from global context targeting
- (void)removeContextKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of global context targeting
- (void)clearContextKeywords;
/// This property gets the year of birth value set by the application developer
- (BOOL)setYearOfBirthWithYob:(NSInteger)yob error:(NSError * _Nullable * _Nullable)error;
/// This property clears year of birth value set by the application developer
- (void)clearYearOfBirth;
/// The itunes app id for targeting
@property (nonatomic, copy) NSString * _Nullable itunesID;
/// The application location for targeting
@property (nonatomic, strong) CLLocation * _Nullable location;
/// The boolean value set by the user to collect user data
@property (nonatomic) BOOL subjectToCOPPA;
/// The boolean value set by the user to collect user data
@property (nonatomic) BOOL subjectToGDPR;
/// The consent string for sending the GDPR consent
@property (nonatomic, copy) NSString * _Nullable gdprConsentString;
@property (nonatomic, copy) NSString * _Nullable storeURL;
@property (nonatomic, copy) NSString * _Nullable domain;
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Targeting * _Nonnull shared;)
+ (Targeting * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12PrebidMobile5Utils")
@interface Utils : NSObject
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Utils * _Nonnull shared;)
+ (Utils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)removeHBKeywordsWithAdObject:(id _Nonnull)adObject;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PrebidMobile",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ResultCode : NSInteger;

SWIFT_CLASS("_TtC12PrebidMobile6AdUnit")
@interface AdUnit : NSObject
- (void)fetchDemandWithAdObject:(id _Nonnull)adObject completion:(void (^ _Nonnull)(enum ResultCode))completion;
/// The func uses Targeting.addUserKeyword() inside.
/// \param key parameter is omitted
///
/// \param value is passed to Targeting.addUserKeyword()
///
- (void)addUserKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_DEPRECATED_MSG("Please use Targeting.addUserKeyword() method instead");
/// The func uses Targeting.addUserKeyword() inside.
/// \param key parameter is omitted
///
/// \param value is passed to Targeting.addUserKeywords()
///
- (void)addUserKeywordsWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value SWIFT_DEPRECATED_MSG("Please use Targeting.addUserKeywords() method instead");
/// The func uses Targeting.clearUserKeywords() inside.
- (void)clearUserKeywords SWIFT_DEPRECATED_MSG("Please use Targeting.clearUserKeywords() method instead");
/// The func uses Targeting.removeUserKeyword() inside.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     forKey: is a value that has been added previously
///   </li>
/// </ul>
- (void)removeUserKeywordForKey:(NSString * _Nonnull)forKey SWIFT_DEPRECATED_MSG("Please use Targeting.removeUserKeyword() method instead");
/// This method obtains the context data keyword & value for adunit context targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addContextDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the context data keyword & values for adunit context targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateContextDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific context data keyword & values set from adunit context targeting
- (void)removeContextDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all context data set from adunit context targeting
- (void)clearContextData;
/// This method obtains the context keyword for adunit context targeting
/// Inserts the given element in the set if it is not already present.
- (void)addContextKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the context keyword set for adunit context targeting
/// Adds the elements of the given set to the set.
- (void)addContextKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific context keyword from adunit context targeting
- (void)removeContextKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of adunit context targeting
- (void)clearContextKeywords;
/// This method allows to set the auto refresh period for the demand
/// \param time refresh time interval
///
- (void)setAutoRefreshMillisWithTime:(double)time;
/// This method stops the auto refresh of demand
- (void)stopAutoRefresh;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

SWIFT_CLASS("_TtC12PrebidMobile11AdViewUtils")
@interface AdViewUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)findPrebidCreativeSize:(UIView * _Nonnull)adView success:(void (^ _Nonnull)(CGSize))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


SWIFT_CLASS("_TtC12PrebidMobile12BannerAdUnit")
@interface BannerAdUnit : AdUnit
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (void)addAdditionalSizeWithSizes:(NSArray<NSValue *> * _Nonnull)sizes;
@end

typedef SWIFT_ENUM(NSInteger, Gender, closed) {
  GenderUnknown = 0,
  GenderMale = 1,
  GenderFemale = 2,
};


SWIFT_CLASS("_TtC12PrebidMobile18InterstitialAdUnit")
@interface InterstitialAdUnit : AdUnit
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId minWidthPerc:(NSInteger)minWidthPerc minHeightPerc:(NSInteger)minHeightPerc;
@end

enum PrebidHost : NSInteger;

SWIFT_CLASS("_TtC12PrebidMobile6Prebid")
@interface Prebid : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bidderNameAppNexus;)
+ (NSString * _Nonnull)bidderNameAppNexus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bidderNameRubiconProject;)
+ (NSString * _Nonnull)bidderNameRubiconProject SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger timeoutMillis;
@property (nonatomic, copy) NSString * _Null_unspecified prebidServerAccountId;
@property (nonatomic, copy) NSString * _Nonnull storedAuctionResponse;
@property (nonatomic) BOOL shareGeoLocation;
@property (nonatomic) enum PrebidHost prebidServerHost;
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Prebid * _Nonnull shared;)
+ (Prebid * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)setCustomPrebidServerWithUrl:(NSString * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
- (void)addStoredBidResponseWithBidder:(NSString * _Nonnull)bidder responseId:(NSString * _Nonnull)responseId;
- (void)clearStoredBidResponses;
@end

typedef SWIFT_ENUM(NSInteger, PrebidHost, closed) {
/// URL <a href="URL">https://prebid.adnxs.com/pbs/v1/openrtb2/auction</a>
  PrebidHostAppnexus = 0,
/// URL <a href="URL">https://prebid-server.rubiconproject.com/openrtb2/auction</a>
  PrebidHostRubicon = 1,
  PrebidHostCustom = 2,
};


SWIFT_CLASS("_TtC12PrebidMobile14RequestBuilder")
@interface RequestBuilder : NSObject
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ResultCode, closed) {
  ResultCodePrebidDemandFetchSuccess = 0,
  ResultCodePrebidServerNotSpecified = 1,
  ResultCodePrebidInvalidAccountId = 2,
  ResultCodePrebidInvalidConfigId = 3,
  ResultCodePrebidInvalidSize = 4,
  ResultCodePrebidNetworkError = 5,
  ResultCodePrebidServerURLInvalid = 6,
  ResultCodePrebidServerError = 7,
  ResultCodePrebidDemandNoBids = 8,
  ResultCodePrebidDemandTimedOut = 9,
};

@class CLLocation;

SWIFT_CLASS("_TtC12PrebidMobile9Targeting")
@interface Targeting : NSObject
/// This property gets the gender enum passed set by the developer
@property (nonatomic) enum Gender gender;
@property (nonatomic, readonly) NSInteger yearOfBirth;
/// This method obtains a bidder name allowed to receive global targeting
- (void)addBidderToAccessControlList:(NSString * _Nonnull)bidderName;
/// This method allows to remove specific bidder name
- (void)removeBidderFromAccessControlList:(NSString * _Nonnull)bidderName;
/// This method allows to remove all the bidder name set
- (void)clearAccessControlList;
/// This method obtains the user data keyword & value for global user targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addUserDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the user data keyword & values set for global user targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateUserDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific user data keyword & value set from global user targeting
- (void)removeUserDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all user data set from global user targeting
- (void)clearUserData;
/// This method obtains the user keyword for global user targeting
/// Inserts the given element in the set if it is not already present.
- (void)addUserKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the user keyword set for global user targeting
/// Adds the elements of the given set to the set.
- (void)addUserKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific user keyword from global user targeting
- (void)removeUserKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of global user targeting
- (void)clearUserKeywords;
/// This method obtains the context data keyword & value context for global context targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addContextDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the context data keyword & values set for global context targeting.
/// the values if the key already exist will be replaced with the new set of values
- (void)updateContextDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific context data keyword & values set from global context targeting
- (void)removeContextDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all context data set from global context targeting
- (void)clearContextData;
/// This method obtains the context keyword for global context targeting
/// Inserts the given element in the set if it is not already present.
- (void)addContextKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the context keyword set for global context targeting
/// Adds the elements of the given set to the set.
- (void)addContextKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific context keyword from global context targeting
- (void)removeContextKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of global context targeting
- (void)clearContextKeywords;
/// This property gets the year of birth value set by the application developer
- (BOOL)setYearOfBirthWithYob:(NSInteger)yob error:(NSError * _Nullable * _Nullable)error;
/// This property clears year of birth value set by the application developer
- (void)clearYearOfBirth;
/// The itunes app id for targeting
@property (nonatomic, copy) NSString * _Nullable itunesID;
/// The application location for targeting
@property (nonatomic, strong) CLLocation * _Nullable location;
/// The boolean value set by the user to collect user data
@property (nonatomic) BOOL subjectToCOPPA;
/// The boolean value set by the user to collect user data
@property (nonatomic) BOOL subjectToGDPR;
/// The consent string for sending the GDPR consent
@property (nonatomic, copy) NSString * _Nullable gdprConsentString;
@property (nonatomic, copy) NSString * _Nullable storeURL;
@property (nonatomic, copy) NSString * _Nullable domain;
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Targeting * _Nonnull shared;)
+ (Targeting * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12PrebidMobile5Utils")
@interface Utils : NSObject
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Utils * _Nonnull shared;)
+ (Utils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)removeHBKeywordsWithAdObject:(id _Nonnull)adObject;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PrebidMobile",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ResultCode : NSInteger;

SWIFT_CLASS("_TtC12PrebidMobile6AdUnit")
@interface AdUnit : NSObject
- (void)fetchDemandWithAdObject:(id _Nonnull)adObject completion:(void (^ _Nonnull)(enum ResultCode))completion;
/// The func uses Targeting.addUserKeyword() inside.
/// \param key parameter is omitted
///
/// \param value is passed to Targeting.addUserKeyword()
///
- (void)addUserKeywordWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_DEPRECATED_MSG("Please use Targeting.addUserKeyword() method instead");
/// The func uses Targeting.addUserKeyword() inside.
/// \param key parameter is omitted
///
/// \param value is passed to Targeting.addUserKeywords()
///
- (void)addUserKeywordsWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value SWIFT_DEPRECATED_MSG("Please use Targeting.addUserKeywords() method instead");
/// The func uses Targeting.clearUserKeywords() inside.
- (void)clearUserKeywords SWIFT_DEPRECATED_MSG("Please use Targeting.clearUserKeywords() method instead");
/// The func uses Targeting.removeUserKeyword() inside.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     forKey: is a value that has been added previously
///   </li>
/// </ul>
- (void)removeUserKeywordForKey:(NSString * _Nonnull)forKey SWIFT_DEPRECATED_MSG("Please use Targeting.removeUserKeyword() method instead");
/// This method obtains the context data keyword & value for adunit context targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addContextDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the context data keyword & values for adunit context targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateContextDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific context data keyword & values set from adunit context targeting
- (void)removeContextDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all context data set from adunit context targeting
- (void)clearContextData;
/// This method obtains the context keyword for adunit context targeting
/// Inserts the given element in the set if it is not already present.
- (void)addContextKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the context keyword set for adunit context targeting
/// Adds the elements of the given set to the set.
- (void)addContextKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific context keyword from adunit context targeting
- (void)removeContextKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of adunit context targeting
- (void)clearContextKeywords;
/// This method allows to set the auto refresh period for the demand
/// \param time refresh time interval
///
- (void)setAutoRefreshMillisWithTime:(double)time;
/// This method stops the auto refresh of demand
- (void)stopAutoRefresh;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

SWIFT_CLASS("_TtC12PrebidMobile11AdViewUtils")
@interface AdViewUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)findPrebidCreativeSize:(UIView * _Nonnull)adView success:(void (^ _Nonnull)(CGSize))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


SWIFT_CLASS("_TtC12PrebidMobile12BannerAdUnit")
@interface BannerAdUnit : AdUnit
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (void)addAdditionalSizeWithSizes:(NSArray<NSValue *> * _Nonnull)sizes;
@end

typedef SWIFT_ENUM(NSInteger, Gender, closed) {
  GenderUnknown = 0,
  GenderMale = 1,
  GenderFemale = 2,
};


SWIFT_CLASS("_TtC12PrebidMobile18InterstitialAdUnit")
@interface InterstitialAdUnit : AdUnit
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfigId:(NSString * _Nonnull)configId minWidthPerc:(NSInteger)minWidthPerc minHeightPerc:(NSInteger)minHeightPerc;
@end

enum PrebidHost : NSInteger;

SWIFT_CLASS("_TtC12PrebidMobile6Prebid")
@interface Prebid : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bidderNameAppNexus;)
+ (NSString * _Nonnull)bidderNameAppNexus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bidderNameRubiconProject;)
+ (NSString * _Nonnull)bidderNameRubiconProject SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger timeoutMillis;
@property (nonatomic, copy) NSString * _Null_unspecified prebidServerAccountId;
@property (nonatomic, copy) NSString * _Nonnull storedAuctionResponse;
@property (nonatomic) BOOL shareGeoLocation;
@property (nonatomic) enum PrebidHost prebidServerHost;
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Prebid * _Nonnull shared;)
+ (Prebid * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)setCustomPrebidServerWithUrl:(NSString * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
- (void)addStoredBidResponseWithBidder:(NSString * _Nonnull)bidder responseId:(NSString * _Nonnull)responseId;
- (void)clearStoredBidResponses;
@end

typedef SWIFT_ENUM(NSInteger, PrebidHost, closed) {
/// URL <a href="URL">https://prebid.adnxs.com/pbs/v1/openrtb2/auction</a>
  PrebidHostAppnexus = 0,
/// URL <a href="URL">https://prebid-server.rubiconproject.com/openrtb2/auction</a>
  PrebidHostRubicon = 1,
  PrebidHostCustom = 2,
};


SWIFT_CLASS("_TtC12PrebidMobile14RequestBuilder")
@interface RequestBuilder : NSObject
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ResultCode, closed) {
  ResultCodePrebidDemandFetchSuccess = 0,
  ResultCodePrebidServerNotSpecified = 1,
  ResultCodePrebidInvalidAccountId = 2,
  ResultCodePrebidInvalidConfigId = 3,
  ResultCodePrebidInvalidSize = 4,
  ResultCodePrebidNetworkError = 5,
  ResultCodePrebidServerURLInvalid = 6,
  ResultCodePrebidServerError = 7,
  ResultCodePrebidDemandNoBids = 8,
  ResultCodePrebidDemandTimedOut = 9,
};

@class CLLocation;

SWIFT_CLASS("_TtC12PrebidMobile9Targeting")
@interface Targeting : NSObject
/// This property gets the gender enum passed set by the developer
@property (nonatomic) enum Gender gender;
@property (nonatomic, readonly) NSInteger yearOfBirth;
/// This method obtains a bidder name allowed to receive global targeting
- (void)addBidderToAccessControlList:(NSString * _Nonnull)bidderName;
/// This method allows to remove specific bidder name
- (void)removeBidderFromAccessControlList:(NSString * _Nonnull)bidderName;
/// This method allows to remove all the bidder name set
- (void)clearAccessControlList;
/// This method obtains the user data keyword & value for global user targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addUserDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the user data keyword & values set for global user targeting
/// the values if the key already exist will be replaced with the new set of values
- (void)updateUserDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific user data keyword & value set from global user targeting
- (void)removeUserDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all user data set from global user targeting
- (void)clearUserData;
/// This method obtains the user keyword for global user targeting
/// Inserts the given element in the set if it is not already present.
- (void)addUserKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the user keyword set for global user targeting
/// Adds the elements of the given set to the set.
- (void)addUserKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific user keyword from global user targeting
- (void)removeUserKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of global user targeting
- (void)clearUserKeywords;
/// This method obtains the context data keyword & value context for global context targeting
/// if the key already exists the value will be appended to the list. No duplicates will be added
- (void)addContextDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method obtains the context data keyword & values set for global context targeting.
/// the values if the key already exist will be replaced with the new set of values
- (void)updateContextDataWithKey:(NSString * _Nonnull)key value:(NSSet<NSString *> * _Nonnull)value;
/// This method allows to remove specific context data keyword & values set from global context targeting
- (void)removeContextDataForKey:(NSString * _Nonnull)forKey;
/// This method allows to remove all context data set from global context targeting
- (void)clearContextData;
/// This method obtains the context keyword for global context targeting
/// Inserts the given element in the set if it is not already present.
- (void)addContextKeyword:(NSString * _Nonnull)newElement;
/// This method obtains the context keyword set for global context targeting
/// Adds the elements of the given set to the set.
- (void)addContextKeywords:(NSSet<NSString *> * _Nonnull)newElements;
/// This method allows to remove specific context keyword from global context targeting
- (void)removeContextKeyword:(NSString * _Nonnull)element;
/// This method allows to remove all keywords from the set of global context targeting
- (void)clearContextKeywords;
/// This property gets the year of birth value set by the application developer
- (BOOL)setYearOfBirthWithYob:(NSInteger)yob error:(NSError * _Nullable * _Nullable)error;
/// This property clears year of birth value set by the application developer
- (void)clearYearOfBirth;
/// The itunes app id for targeting
@property (nonatomic, copy) NSString * _Nullable itunesID;
/// The application location for targeting
@property (nonatomic, strong) CLLocation * _Nullable location;
/// The boolean value set by the user to collect user data
@property (nonatomic) BOOL subjectToCOPPA;
/// The boolean value set by the user to collect user data
@property (nonatomic) BOOL subjectToGDPR;
/// The consent string for sending the GDPR consent
@property (nonatomic, copy) NSString * _Nullable gdprConsentString;
@property (nonatomic, copy) NSString * _Nullable storeURL;
@property (nonatomic, copy) NSString * _Nullable domain;
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Targeting * _Nonnull shared;)
+ (Targeting * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12PrebidMobile5Utils")
@interface Utils : NSObject
/// The class is created as a singleton object & used
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Utils * _Nonnull shared;)
+ (Utils * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The initializer that needs to be created only once
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)removeHBKeywordsWithAdObject:(id _Nonnull)adObject;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
